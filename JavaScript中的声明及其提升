JavaScript中的声明及其提升

var
变量声明，无论发生在何处，都在执行任何代码之前进行处理。用var声明的变量的作用域是它当前执行的上下文，它可以是嵌套的函数，也可以是声明在任何函数外的变量。
将赋值给未声明变量的值在执行赋值时将其隐式的创建为全局变量（它将成为全局对象的属性）

1. 声明变量的作用域限制在其声明位置的上下文中，而非声明变量总是全局的。
2. 声明变量在任何代码执行前创建，而非声明变量只有在执行赋值操作的时候才会被创建。

全局变量，局部变量，外部函数作用域

const
常量是块级作用域，很像let语句定义的变量。常量的值不能通过重新赋值来改变，并且不能重新声明。
此声明创建一个常量，其作用域可以是全局或本地声明的块。与var变量不同的是，全局常量不会变为窗口对象的属性。需要一个常数的初始化器；也就是说，必须在声明的同一语句中指定它的值。
const声明创建一个值的只读引用。但这并不意味着他所持有的值是不可变的，只是变量标识符不能重新分配。例如，在引用内容是对象时，可以改变对象的内容。

const MY_OBJECT = {"key": "value"};  // 常量可以定义成对象
MY_OBJECT = {"OTHER_KEY": "value"};  // 重写对象和上面一样会失败
MY_OBJECT.key = "otherValue";        // 对象属性并不在保护的范围内，下面这个声明会成功执行


let
let语句声明一个块级作用域的本地变量，并且可选的将其初始化为一个值。

描述
let允许声明一个作用域被限制在块级中的变量、语句或者表达式。与var关键字不同的是，它声明的变量只能是全局或者整个函数块的。

作用域规则：
let声明的变量只在其声明的块或者子块中可用，与var类似，二者最主要的区别在于var声明的变量的作用域是整个封闭函数。

例子：
function bn(){
	 var a= 1;
	if(true){
	 var a= 2;       //相同变量重新赋值
	 console.log(a); //输出2
	}
	console.log(a);  //输出2
}

function bn(){
   let a = 1;
   if(true){
   let a = 2;       //不同变量声明并赋值
   console.log(a);  //输出2 
   }	
   console.log(a)   //输出1
}


变量提升和函数提升


JavaScript 在执行任何代码段之前，将函数声明放入内存中的优点之一是，这允许你可以在你的代码中使用一个函数，在声明该函数之前。