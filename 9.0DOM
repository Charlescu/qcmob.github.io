DOM

文档对象模型DOM（Document Object Model）定义访问和处理HTML文档的标准方法。DOM将HTML文档呈现为带有元素、属性和文本的树结构（节点树）。

节点分为元素节点、文本节点、属性节点
1、元素节点：<html> <body> <p>等都是元素节点，即标签。
2、文本节点：向用户展示的内容，标签中的JavaScript、DOM、CSS等文本。
3、属性节点：标签的属性，<a>标签的href连接属性。





节点属性：
nodeName:   返回一个字符串，其内容是给定节点的名字。
nodeType:   返回一个整数，这个数值代表给定节点的类型。
nodeValue:  返回给定节点的当前值。

用法：getElementById().nodeName;IE和其他浏览器返回节点树木和类型不同（其他类型浏览器包括了元素节点和元素节点之间的空白符，空白节点在其他浏览器中是文本节点）


节点方法
childNodes  返回一个数组，这个数组由给定元素节点的子节点构成
    访问子节点childNodes
       访问选定元素节点下的所有子节点的列表，返回的值可以看作是一个数组，他具有length属性。
    语法：elementNode.childNodes
    注意：
    如果选定的节点没有子节点，则该属性返回不包含节点的 NodeList。
firstChild  返回第一个子节点。
lastChild   返回最后一个子节点。
    一、firstChild 属性返回‘childNodes’数组的第一个子节点。如果选定的节点没有子节点，则该属性返回 NULL。
    语法：node.firstChild
    说明：与elementNode.childNodes[0]是同样的效果。
    二、 lastChild 属性返回‘childNodes’数组的最后一个子节点。如果选定的节点没有子节点，则该属性返回 NULL。
    说明：与elementNode.childNodes[elementNode.childNodes.length-1]是同样的效果。
perentNode  返回一个指定节点的父节点。(父节点只能有一个)

nextSibling 返回给定节点的下一个子节点。
previousSibling  返回给定节点的上一个子节点。
   语法：nodeObject.nextSibling
    1. nextSibling 属性可返回某个节点之后紧跟的节点（处于同一树层级中）。
    2. previousSibling 属性可返回某个节点之前紧跟的节点（处于同一树层级中）。
    说明：
         如果无此节点，则该属性返回 null。
    注意：
        两个属性获取的是节点。Internet Explorer 会忽略节点间生成的空白文本节点（例如，换行符号），而其它浏览器不会忽略。
    解决问题方法:
        判断节点nodeType是否为1, 如是为元素节点，跳过。
       
       function get_nextSibling(n){
        var x=n.nextSibling;
        while (x && x.nodeType!=1){
            x=x.nextSibling;
        }
        return x;
    }




DOM操作
createElement(element)       创建一个新的元素节点
createTextNode()             创建一个包含着给定文本的新文本节点。

appendChild(newnode)         指定节点的最后一个子节点列表之后添加一个新的子节点
insertBefore(newcode,node)   将一个节点插入到一个给定元素节点的给定子节点的前面 newcode要插入节点，code给定节点
  otest.insertBefore(newnode,node); 也可以改为:  otest.insertBefore(newnode,otest.childNodes[0]); 
   例子：插入新的元素
  var otest = document.getElementById("test");    //得到一个父节点
  var newcode = document.createElement("li");     //创建一个子节点
      newcode.innerHTML = "PHP";                  //为子节点添加内容
   otest.appendChild(newcode);                    //将子节点添加到子节点列表

removeChild()             从子节点列表中删除某个节点。如果删除成功，此方法返回被删除的节点，如失败，则返回NULL。
   注意: 把删除的子节点赋值给 x，这个子节点不在DOM树中，但是还存在内存中，可通过x操作。彻底删除此对象可给x赋值。
replaceChild()            实现子节点(对象)的替换。返回被替换对象的引用。
   语法：
    node.replaceChild(newnode,oldnode)  newnode:必需,用于替换oldnew的对象.oldnode: 必需,被newnode替换的对象。
     1. 当 oldnode 被替换时，所有与之相关的属性内容都将被移除。 
     2. newnode 必须先被建立。

注释：前两个是document方法


getElementById()方法

getElementsByName()方法
语法：
document.getElementsByName(name)  

与getElementById()方法不同的是，通过元素的name属性查询元素，而不是通过id属性。

1. 因为文档中的 name 属性可能不唯一，所有 getElementsByName() 方法返回的是元素的数组，而不是一个元素。
2. 和数组类似也有length属性，可以和访问数组一样的方法来访问，从0开始。
例子：
function getnum(){
  var mynode= document.getElementsByName("myt");  
  alert(mynode.length);
}



getElementsByTagName()方法
  返回带有指定标签名的节点对象及其子元素的集合。返回元素的顺序是它们在文档中的顺序。

  语法：
  document.getElementsByTagName(Tagname)

  说明：
  1.Tagname是标签的名称，如p、a、img等标签。
  2.和数组类似也有length属性，可以和访问数组一样的方法来访问，所以从0开始。



区别  getElementByID,getElementsByName,getElementsByTagName
以人来举例说明，人有能标识身份的身份证，有姓名，有类别(大人、小孩、老人)等。
1. ID 是一个人的身份证号码，是唯一的。所以通过getElementById获取的是指定的一个人。  
   //通过指定ID获取元素
2. Name 是他的名字，可以重复。所以通过getElementsByName获取名字相同的人集合。
   //通过元素名称name属性获取元素
3. TagName可看似某类，getElementsByTagName获取相同类的人集合。如获取小孩这类人，getElementsByTagName("小孩")。
   //通过标签名称获取元素



getAttribute()方法
   通过元素节点的属性名称获取属性的值。

 语法：
 elementNode.getAttribute(name)
 说明：
 1. elementNode：使用使用getElementById()、getElementsByTagName()等方法，获取到的元素节点。
 2. name：要想查询的元素节点的属性名字。

setAttribute()方法
  setAttribute()方法增加一个指定名称和值的新属性，或者把一个现有的属性设定为指定的值。
  语法：
  elementNode.setAttribute(name,value)
  说明：
  1. name:要设置的属性名
  2. value：要设置的属性值
  注意：
  1. 把指定的属性设置为指定的值。如果不存在具有指定名称的属性，该方法将创建一个新属性。
  2. 类似于getAttribute()方法，setAttribute()方法只能通过元素节点对象调用的函数。