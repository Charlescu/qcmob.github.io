JavaScript中的所有事物都是对象，如：字符串、数值、数组、函数等，每个对象带有属性和方法。
对象的属性:反映该对象某些特定的性质的，如：字符串的长度、图像的长宽等。
对象的方法：能够在对象上执行的动作。例如，表单的“提交”（submit），时间的“获取”（getYear）等；
JavaScript提供多个内建对象，比如String、Date、Array等

使用对象前需要先定义一个对象：
var objectName = new Array();使用new关键字定义对象
或者
var objectName = [];

访问对象属性的语法：
objectName.propertyName
访问对象的方法：
objectName.methodName()





Date对象
日期对象可以存储任意一个日期，并且可以精确到毫秒数（1/1000）。

定义一个时间对象：
var Udate =  new Date(); // 使用关键字new,Date()首字母必须大写。

访问方语法：“<日期对象>.<方法>”

Date对象中处理时间和日期的常用方法：
get/setDate()          返回 设置日期得到当月的日期数
get/setFullYear()      返回 设置年份，用四位数表示
get/setYear()          返回 设置年份 //推荐废弃，返回值不确定**************!!!!!!!!
get/setMonth()         返回 设置月份  0:一月...11:十二月
get/setHours()         返回 设置小时   24小时制
get/setMinutes()       返回 设置分钟数
get/setSeconds()       返回 设置秒钟数
get/setTime()          返回 设置时间（毫秒为单位）

注意：setFullYear()  输入两位数字是得到的结果可能不同
      getFullYear()  得到结果格式分别为星期、月、日、年、时、分、秒、时区

    getDay()   返回星期，返回的是0-6的数字，0表示星期天，6表示星期一；

   get/setTime()   返回/设置时间，单位毫秒数。计算从1970年1月1日零时到日期对象所指的日期的毫秒数。






String字符串对象
定义字符串的方法就是直接赋值，例如：
var mystr = "这是一个字符串";

访问字符串对象的属性length：  //以及constructor和prototype属性
StringObject.length;  //返回该字符串的长度。

访问字符串对象的方法：
StringObject.fangfa();
   
String对象的方法：
   anchor()   创建HTML锚







Math对象
math对象，提供对数据的数据计算。
注意：math是一个固有对象，无需创建它，直接把math作为对象使用就可以调用其所有的属性和方法。这是它与Date和String对象的区别。

例如： var mypi = Math.PI;
       var mydate = new Date();
       myday = mydate.getFullYear();

  Math对象的属性：
   E        返回算数常量，即自然对数的底数（约等于2.718）；
   LN2      返回2的自然对数（约等于0.693）；
   LN10     返回10的自然对数（约等于2.302）；
   LOG2E    返回以2为底的e的对数（约等于1.442）；
   LOG10E   返回以10为底的对数（约等于0.434）；
   PI       返回圆周率（约等于3.14159）；
   SQRT1_2  返回2的平方根的倒数（约等于0.707）；
   SQRT2    返回2的平方根（约等于1.414）；

  Math对象的方法：
   abs(x)    返回数的绝对值；
   max(x,y)  返回x和y中的最高值；
   min(x,y)  返回x和y中的最低值；

   acos(x)   返回数的反余弦值；
   asin(x)   返回数的反正弦值；
   atan(x)   返回数的反正切值(取值为-PI/2到PI/2之间的弧度值)；
   atan2(y,x)  返回由X轴到点（x,y）的角度（弧度为单位）；
   cos(x)    返回数的余弦；
   sin(x)    返回数的正弦；
   tan(x)    返回角的正切；

   round(x)  把数四合五入为最接近的整数字；
   ceil(x)   对数进行上舍入运算；（不是四舍五入）
   floor(x)  对数进行下舍入运算；
   
   exp(x)    返回e的指数幂的值；
   log(x)    返回数的自然对数（底为e）；
   pow(x,y)  返回x的y次幂；
   sqrt(x)   返回数的平方根；

   random()  返回0~1之间的随机数；（括号中为空）
  
   toSource() 返回该对象的源代码；
   valueOf()  返回Math对象的原始值；








Array数组对象
数组对象是一个对象的合集，里边的对象可以是不同类型的。数组的每一个成员对象都有一个“下标”，用来表示它在数组中的位置，是从零开始的。

<!--  数组定义方式  -->
数组创建方式有多种：
（1）
var myarr = new Array(66,80,90);  //创建数组同时赋值；
（2）
var myarr = [66,80,90];          //直接输入一个数组（称“字面量数组”）
（3）
var myarr = new Array(30);       //创建一个数组只给一个长度，并不给值；

注意：数组存储的数据可以是任何类型（数值、字符、布尔值等）；
      在javaScript中，向数组继续添加新元素时只需使用下一个未用的索引，任何时候都可以不断向数组添加新元素；

      var nyarr = new Array();
      myarr[0] = 11;
      myarr[1] = 12;
      若想继续添加元素，只需使用下一个未用的索引
      myarr[2] = 13;

   在未规定数组长度时，根据索引添加新元素。规定长度时也可以添加元素如果原来数组长度为3，此时满了依然可以添加；
      
      javaScript数组属性length；

      myarray.length; //获得数组myarray的长度

      注意：数组索引从0开始而且JavaScript数组的length属性是可变的，这一点需要特别注意。数组随元素的增加，长度也会改变；

      二维数组
      myarr[][]

      (1)二维数组定义方法

       var myarr = new Array(); //申明一维数组
       for(var i=0;i<2;i++){      //一维数组长度为2
          myarr[i] = new Array(); //再声明二维数组
       for(var j=0;j<3;j++){      //二维数组长度为3
          myarr[i][j] = i*j;    //为每个数组元素赋值
          }
       }

      (2)二维数组定义方法
       var myarr = [[0,1,2],[1,2,3]]
        myarr[0][1] = 5;       //将5的值传入到数组中

Array对象属性：
constructor   返回对创建此对象的数组函数的引用
length        设置或返回数组中元素的数目
prototype     向对象添加属性或者方法

Array对象方法：

slice();
1.返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。
2. 该方法并不会修改数组，而是返回一个子数组。
注意：
1. 可使用负值从数组的尾部选取元素。
2.如果 end 未被规定，那么 slice() 方法会选取从 start 到数组结尾的所有元素。(start,)(start)两种方式都可以
3. String.slice() 与 Array.slice() 相似。
sort();
1.如果不指定<方法函数>，则按unicode码顺序排列。
2.如果指定<方法函数>，则按照<方法函数>所指定的排序方法排序。
myArray.sort(sortMethod);
注意：
该函数要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字。比较函数应该具有两个参数a和b，其返回值如下：
若返回值<=-1,则表示A在排序后的序列中出现在B之前。
若返回值>-1&&<1,则表示A和B具有相同的排序顺序。
若返回值>=1,则表示A在排序后的序列中出现在B之前。
   
   若要比较数组内的数值大小进行排序的时候，就要定义函数进行了
   例：
      <script type="text/javascript">
        function sortNum(a,b){
        return a - b;
        //升序排序，降序排序时返回 b - a；
        }
        var myarr = new Array("20","15","56");
        document.write(myarr.sort(sortNum));
      </script>