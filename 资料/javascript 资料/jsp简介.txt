jsp简介：

JSP与PHP、ASP、ASP.NET等语言类似，运行在服务器端的语言。

1.jsp：java Server Pages,是一种动态网页开发技术，其根本是一个简化的Servlet设计，实现了在java当中使用HTML标签。


2.常见动态网站开发技术对比：
1jsp：java平台，安全性高，是和开发大型的企业级的Web应用程序，以及分布式开发（hadoop：分布式系统基础架构）。
2ASP.NET：.NET平台，简单易学。但是安全性和跨平台性差。
3PHP：简单高效，成本低，开发周期短，适合中小型企业的web应用开发（LAMP：linux+Apache+Mysql+PHP）

3.jsp指令
page指令：位于jsp页面的顶端，同一个页面可以有多个page指令。
include指令：将一个外部文件嵌入到当前jsp中，同时解析这个页面的jsp语句。
taglib指令：使用标签库定义新的自定义标签，在jsp页面中启用定制行为。

page指令： language    指定jsp页面使用的脚本语言    				默认值:java
		   import      通过该属性来引用脚本语言中使用到的类文件     默认值:无
		   contentType 用来指定jsp页面所采用的编码方式			    默认值:text/html IOS-8859-1
		  
4.jsp注释：
HTML注释：<!--html注释-->  客户端可见（可以通过查看源代码找到注释）
jsp注释：<%--jsp注释--%>  客户端不可见

5.jsp页面的生命周期
当浏览器请求jsp页面时，jsp引擎会首先检查是否需要编译这个文件，如果这个文件没有被编译过，或者在上次编译后被更改过，则编译这个JSP文件。通过jspInit()方法来将jsp转化为servlet，生产字节码文件。完成初始化后jsp引擎会调用_jspService()方法进行解析执行。

jspService()方法被调用来处理客户端的请求，对每一个请求，jsp引擎创建一个新的线程来处理该请求，如果有多个客户端同时请求该jsp文件，则jsp引擎会创建多个线程。每个客户端请求对应一个线程，以多线程的方式执行可以大大降低对系统的资源需求，提高系统并发量及响应时间。但也要注意多线程的编程带来的同步问题，由于该Servlet始终驻于内存，所以响应是非常快的


6.jsp内置对象
jsp内置对象时web容器创建的一组对象，不使用new关键字就可以使用的内置对象。
jsp九大内置对象：out,request,response,session,application,page,pagecontext,exception,config

1).out:是JspWriter类的实例，是向客服端输出内容常用的对象。
	void println()向客户端打印字符串。
	void clear()清除缓冲区的内容，如果在flush之后调用会抛出异常。
	void clearBuffer()清除哈U你冲去的内容，在flush之后调用不会抛出异常。
	void flush()将缓冲区的内容输出到客户端。
	int getBufferSize()返回缓冲区字节数的大小，如不设缓冲区则为0
	int getRemaining()返回缓冲区还剩余多少可用。
	boolean isAutoFlush()返回缓冲区满时，是自动清空还是抛出异常
	void close()关闭输出流
缓冲区默认值一般是8KB，可以通过页面指令page来改变默认值。	

	
2).表单提交方式：get和post
get:以明文的方式通过URL提交表单，数据在URL中可以看到。提交的数据最多不超过2kb，安全性较低但效率比post高适合提交数据量不大，安全性不高的数据。比如：搜索，查询等功能；
post：将用户提交的信息封装到HTML HEADER内。适合提交数据量大，安全性高的用户信息，比如注册，修改，上传

3).request: setCharacterEncoding()可以解决提交表单形式的中文乱码问题，无法解决通过URL传递中文的乱码问题。
		 此时需要修改tomcat下server.xml文件，在Connector中假如属性 URIEcoding="utf-8"来解决
		 
4).response:response对象包含了响应客户请求的有关信息，但在jsp中很少直接用到它，它是HttpServletResponse类的实例。response对象具有界面作用域，即访问一个页面时，该页面内的response对象只能对这次访问有效，其他页面的response对当前页面无效。

PrintWriter getWriter()返回可以想客户端输出字符的一个对象，当使用println()方法输出时，它的输出顺序高于内置对象out。如果想修改输出顺序，可使用flush()方法。
如果使用PrintWriter的对象输出内容，可以通过response.setContentType("text/html;charset=utf-8")来设置输出html文件类型
setContentType用于指定输出的文件类型。
		 
请求转发和请求重定向：
请求重定向：客户端行为，response.sendRedirect()，从本质上来说等同于两次请求，前一次的请求对象不会保存，地址栏的URL地址会改变
请求转发：服务器行为，request.getRequestDispatcher().forword(req,resp),是一次请求，转发后请求对象会保存，地址栏的URL地址不会改变

5).session
生命周期：
创建：当客户端第一次访问jsp或者servlet的时候，服务器会为当前会话创建一个SessionId,每次客户端向服务器发送请求时，都会将SessionId携带过去，服务器对SessionId进行校验。
活动：只要当前会话页面没有完全关闭，重新打开新的浏览器窗口访问同一项目资源时属于同一次会话，即使关闭浏览器，原有的session也并没有被销毁，它仍然存在于服务器。
销毁：1调用session.invalidate()方法。
	  2Session过期，设置超时时间
		1)session.setMaxInactiveInterval(时间(秒));
		2)在web.xml中配置
			<session-config>
			<session-timeout>
			10(分钟)
			</session-timeout>
			</session-config>
		3)tomcat默认超时时间为30分钟
	  3服务器重启

6).application（ServletContext类的实例）
application对象实现了用户间数据的共享，可以存放全局变量。
application开始于服务器的启动，终止于服务器的关闭。

7).page
page对象就是指向当前JSP页面本身，有点像类中的this指针，是java.lang.Object类的对象

8)pageContext对象
pageContext对象提供了对jsp页面内所有的对象及名字空间的访问
pageContext对象可以访问到本页所在的session，也可以去本页面所在的application的某一个属性值
pageContext对象的本类名也叫pageContext.

常用方法：
JspWriter getOut()：返回当前客户端相应被使用的JSPWriter流(out)
HttpSession getSession()：返回当前页面中的HttpSession对象(session)
Object getPage()：返回当前页的Object对象(page)
ServletRequest getRequest()：返回当前页的ServletRequest对象(request)
ServletRequest getResponse()：返回当前页的ServletResponse对象(response)
int getAttributeScope(String name)：返回某属性的作用范围
void forward(String relativeUrlPath)：使当前页面重导到另一个页面
void include(String relativeUrlPath)：在当前位置包含另一个文件

9)Config对象
   config对象是在一个Servlet初始化时，JSP引擎向它传递信息用的，此信息包括Servlet初始化时所用到的参数(通过属性名和属性值构成)以及服务器的有关
   信息(通过传递ServletContext对象)

常用方法：
ServletContext getServletContext()返回含有服务器相关信息的ServletContext对象
String getInitParamerter(String name)：返回初始化参数的值
Enumeration getInitParameterNames()：返回Servlet初始化所需要所有参数的枚举

10)Exception对象
	Exception对象时一个异常对象，当一个页面在运行过程中发生了异常，就产生这个对象。如果JSP页面要应用此对象，就必须把isErrorPage设为true，否
	则无法编译。isErrorPage属性设置在jsp page中。

常用方法：
String getMessage()：返回描述异常的信息
String toString()：返回关于异常的简单描述信息
void printStackTrace()：显示异常及其栈轨迹
Throwable FillInStackTrace()：重写异常的执行栈轨迹



JspWriter与PrintWriter的区别：
1. 这两个对象的类型是完全不同的：内置对象out的类型是JspWriter；response.getWrite()返回的类型是PrintWriter 
2.获取方式不同：JspWriter是JSP的内置对象，直接使用即可，对象名out是保留字，也只能通过out来调用其相关方法。此外还可以通过内置对象pageContext.getOut()获得；PrintWriter则是在用的时候需要通过内置对象response.getWriter()获得
3. JspWriter的print()方法会抛出IOException；而PrintWriter则不会 
4. JspWriter和PrintWriter都继承自Java.io.Writer，但JspWriter是抽象类，而PrintWriter不是
然而最最主要的区别是：如果在同一jsp或Servlet文件中同时使用了JspWriter对象和PrintWriter对象，在调用print或者println方法后的执行情况不同！
注意：PrintWriter对象的println方法必须在未设置setContentType使用，否则无法换行


	
	
