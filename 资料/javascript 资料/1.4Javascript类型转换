Javascript类型转换

"1.23" == 1.23  在进行比较时，会将字符串转换为数字进行比较。
    0  == flase
  null == undefined

  ===  严格等于，相等的条件是数值相等，类型相等
  null===null
  undefined===undefined
  NaN!=NaN
  new Object() != new Object()     比较时，用的是引用去做比较，而不是用值去比较

  类型相同，同===

  类型不同，尝试类型转换和比较：
  null == undefined undefined == null  相等
  number == string string转number 1 == "1.0"  //true  等号一边是数字，一边是字符串，尝试String转number
  boolean == ?转number  1 == true // true   等号一边是Boolean会将Boolean转为数字，以此类推
  object == number|string 尝试对象转为基本类型   new String('hi') == 'hi' //true
  其他：false

3种主要的原始类型Boolean值，数字和字符串都有toString()方法，可以把它们的值转换成字符串。
ECMAScript 定义所有对象都有 toString() 方法，无论它是伪对象，还是真对象。因为 String 类型属于伪对象，所以它一定有 toString() 方法

Boolean 类型的 toString() 方法只是输出 "true" 或 "false"，结果由变量的值决定：
  var bFound = false;
  alert(bFound.toString()); //输出 "false"
Number 类型的 toString() 方法比较特殊，它有两种模式，即默认模式和基模式。采用默认模式，toString() 方法只是用相应的字符串输出数字值（无论是整数、浮点数还是科学计数法）：
   var iNum1 = 10;
   var iNum2 = 10.0;
  alert(iNum1.toString());  //输出 "10"
  alert(iNum2.toString());  //输出 "10"

  在默认模式中，无论最初采用什么表示法声明数字，Number 类型的 toString() 方法返回的都是数字的十进制表示。因此，以八进制或十六进制字面量形式声明的数字输出的都是十进制形式的。
采用 Number 类型的 toString() 方法的基模式，可以用不同的基输出数字，例如二进制的基是 2，八进制的基是 8，十六进制的基是 16。

ECMAScript 提供了两种把非数字的原始值转换成数字的方法，即 parseInt() 和 parseFloat()。
前者把值转换成整数，后者把值转换成浮点数。只有对 String 类型调用这些方法，它们才能正确运行；对其他类型返回的都是 NaN。

parseInt() 方法首先查看位置 0 处的字符，判断它是否是个有效数字；如果不是，该方法将返回 NaN，不再继续执行其他操作。但如果该字符是有效数字，该方法将查看位置 1 处的字符，进行同样的测试。这一过程将持续到发现非有效数字的字符为止，此时 parseInt() 将把该字符之前的字符串转换成数字。
例如，如果要把字符串 "12345red" 转换成整数，那么 parseInt() 将返回 12345，因为当它检查到字符 r 时，就会停止检测过程。
字符串中包含的数字字面量会被正确转换为数字，比如 "0xA" 会被正确转换为数字 10。不过，字符串 "22.5" 将被转换成 22，因为对于整数来说，小数点是无效字符。

parseFloat() 方法与 parseInt() 方法的处理方式相似，从位置 0 开始查看每个字符，直到找到第一个非有效的字符为止，然后把该字符之前的字符串转换成整数。
不过，对于这个方法来说，第一个出现的小数点是有效字符。如果有两个小数点，第二个小数点将被看作无效的。parseFloat() 会把这个小数点之前的字符转换成数字。这意味着字符串 "11.22.33" 将被解析成 11.22。
使用 parseFloat() 方法的另一不同之处在于，字符串必须以十进制形式表示浮点数，而不是用八进制或十六进制。该方法会忽略前导 0，所以八进制数 0102 将被解析为 102。对于十六进制数 0xA，该方法将返回 NaN，因为在浮点数中，x 不是有效字符。（注释：经测试，具体的浏览器实现会返回 0，而不是 NaN。）
此外，parseFloat() 方法也没有基模式。

强制类型转换
还可以使用强制类型转换（type casting）来处理转换值的类型。使用强制类型转换可以访问特定的值，即使它是另一种类型的。

ECMAScript 中可用的 3 种强制类型转换如下：
  Boolean(value) - 把给定的值转换成 Boolean 型；
  Number(value) - 把给定的值转换成数字（可以是整数或浮点数）；
  String(value) - 把给定的值转换成字符串；
用这三个函数之一转换值，将创建一个新值，存放由原始值直接转换成的值。这会造成意想不到的后果。

var b1 = Boolean(null);         //false - null
var b1 = Boolean(new object()); //true - 对象

Number(undefined) NaN
Number("1.2.3")   NaN
Number(new object())  NaN